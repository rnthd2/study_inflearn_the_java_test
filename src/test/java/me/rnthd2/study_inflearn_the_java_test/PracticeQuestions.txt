1. 테스트 이름을 표기하는 방법으로 공백, 특수 문자 등을 자유롭게 쓸 수 있는 애노테이션은?
@DisplayName

2. JUnit 5, jupiter는 크게 세가지 모듈로 나눌 수 있습니다. 다음 중에서 테스트를 실행하는 런처와 테스트 엔진의 API를 제공하는 모듈은 무엇일까요?
1 junit jupiter 2 junit vintage 3 junit platform

3 platorm

3. JUnit 5에서 테스트 그룹을 만들고 필터링 하여 실행하는데 사용하는 애노테이션은?

@Tag

4. 다음 코드는 여러 Assertion을 모두 실행하려는 테스트 코드입니다. 빈칸에 적절한 코드는
무엇인가요?
@Test
@DisplayName("스터디 만들기") void create_new_study() {
Study actual = new Study(1, "테스트 스터디"); ​________​(
() -> assertEquals(1, actual.getLimit()),
() -> assertEquals("테스트 스터디", actual.getName()),
() -> assertEquals(StudyStatus.DRAFT, actual.getStatus())
); }

assertall

5. 다음은 JUnit 5가 제공하는 애노테이션으로 컴포짓 애노테이션을 만드는 코드입니다. 이 애노테이션에 적절한 Rention 전략은 무엇인가요?
@Target(ElementType.METHOD)
@Retention(?)
@Test
@Tag("fast")
public @interface FastTest {
}

RetentionPolicy.RUNTIME

6. 다음 중 JUnit 5가 제공하는 확장팩 등록 방법이 아닌것은? 1 @ExtendWith
2 @Rule
3 @RegisterExtension
4 ServiceLoader

2 @Rule

7. 다음 코드는 유즈케이스 테스트를 작성한 것입니다. 다음 빈 칸에 적절한 코드는?

@TestInstance(TestInstance.Lifecycle.  ? )
@TestMethodOrder(MethodOrderer. ? )
public class StudyCreateUsecaseTest {
    private Study study;
@Order(1)
@Test
@DisplayName("스터디 만들기") public void create_study() {
study = new Study(10, "자바");
.class)
} }
    assertEquals(StudyStatus.DRAFT, study.getStatus());
}
@Order(2)
@Test
@DisplayName("스터디 공개") public void publish_study() {
study.publish();
assertEquals(StudyStatus.OPENED, study.getStatus());
assertNotNull(study.getOpenedDateTime());

PER_CLASS
OrderAnnotation

8. 다음은 여러 매개변수를 바꿔가며 동일한 테스트를 실행하는 코드입니다. 빈칸에 적잘한 코드는?
@Order(4)
@DisplayName("스터디 만들기")
@?  (name = "{index} {displayName} message={0}") @CsvSource({"10, '자바 스터디'", "20, 스프링"})
void parameterizedTest(@?  (StudyAggregator.class) Study study) {
    System.out.println(study);
}
static class StudyAggregator implements ArgumentsAggregator {
    @Override
    public Object aggregateArguments(ArgumentsAccessor accessor,
ParameterContext context) throws ArgumentsAggregationException {
        return new Study(accessor.getInteger(0), accessor.getString(1));
    }
}

ParameterizedTest
AggregateWith